{
  // Place your web workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "useDispatch hook": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "udh",
    "body": "const dispatch = useDispatch();\n",
    "description": "call useDispatch"
  },
  "useState hook": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "ush",
    "body": "const [$1, set${1/^_?(.+)/${1:/capitalize}/}] = useState($2);\n",
    "description": "call useState"
  },
  "useCallback hook": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "ucbh",
    "body": "const $1 = useCallback(($3) => {\n\t$4\n}, [$2]);\n",
    "description": "call useCallback"
  },
  "useEffect hook": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "ueh",
    "body": "useEffect(() => {\n\t$0\n}, [$1]);\n",
    "description": "call useEffect"
  },
  "useSWR hook": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "uswr",
    "body": "const { data$3 } = useSWR($1, $2);\n",
    "description": "call useEffect"
  },
  "useMemo hook": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "umh",
    "body": "const $1 = useMemo(() => {\n\t$3\n}, [$2]);\n",
    "description": "call useMemo"
  },
  "useRef hook": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "urh",
    "body": "const $1 = useRef($2);\n",
    "description": "call useRef"
  },
  "useSelector hook": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "uslh",
    "body": "const { $6 } = useSelector(({ $5 }) => ({ $6 }));\n",
    "description": "call useSelector"
  },
  "Stateless Function Component": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "sfc",
    "body": "export const $1 = ($2) => (\n\t$0\n);\n",
    "description": "define and export dumb component"
  },
  "Function Component": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "fc",
    "body": "export const $1 = ($2) => {\n\t$3\n\treturn (\n\t\t$0\n\t)\n};\n",
    "description": "define and export regular function component"
  },
  "Function Component Container": {
    "scope": "javascript,typescript,javascriptreact",
    "prefix": "fcc",
    "body": [
      "import { useState } from \"react\";",
      "import { useSelector } from \"react-redux\";",
      "import axios from \"axios\";",
      "import useSWR from \"swr\";\n\n",
      "export const $1 = ($2) => {\n\t",
      "const [$3, set${3/(.*)/${3:/pascalcase}/}] = useState($4);\n\t",
      "const { $6 } = useSelector(({ $5 }) => ({ $6 }));",
      "const { data: $7 } = useSWR($8 ? process.env.$9 : null, (url) => axios.get(url));\n",
      "return (\n\t\t$0\n\t)\n};\n",
      "export default $1;\n"
    ],
    "description": "scaffold a functional component container"
  }
}
